#!/usr/bin/env bash

# Copyright 2019 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#+
#+ Usage: testgridshot <release>
#+
#+   <release> can be something like 'master', '1.15', ...
#+
#+   This will inspect the testgrid dashboards 'blocking' & 'informing' for the
#+   specified <release>, create screenshots of failing tests, and print a markdown
#+   stub on standard out. This stub is intended to be copy & pasted into a issue
#+   comment for the release cutting GitHub issue.
#+
#+ Configuration:
#+   Configuration can be passed in via the environment. The following
#+   variables are available:
#+
#+   GITHUB_TOKEN: [*mandatory*]
#+     This token is used to (pull from and) push the images to the wiki repo.
#+
#+   BOARDS: [default: "blocking informing"]
#+     Change which boards you are interested in
#+
#+   STATES: [default: "FAILING"]
#+     Change the tests you want to screenshot
#+     Available states: FAILING, FLAKY, PASSING
#+
#+   BLOCK_WIDTH: [default: 30]
#+     The width of the individual testgrid red & green block.
#+     Influences on how many test runs will be shown on the screenshot.
#+
#+   WIDTH/HEIGHT: [default: WIDTH=3000/HEIGHT=2500]
#+     The width and height of the generated screenshot in pixel.
#+
#+   RETRY_COUNT: [default: 3]
#+     Change how often we should retry when talking to (curl'ing) APIs.
#+
#+   RETRY_SLEEP: [default: 2]
#+     Change the amount of time we want to wait between consecutive API call
#+     retries.
#+
#+   WIKI_SLUG: [default: kubernetes/release]
#+     The wiki of the specified repo will be used to store the images in. This
#+     needs to be in the form <USER-OR-ORG>/<REPO>.
#+
#+   Example:
#+     $ GITHUB_TOKEN='xxxx' BOARDS='all informing' STATES='FAILING FLAKY' BLOCK_WIDTH=10 ./testgridshot 1.15
#+         Creates dense screenshots of all the 'sig-release-1.15-{all,informing}'
#+         boards which are either failing or flaking
#+
#+ How it works:
#+   General flow:
#+   - Create a shallow clone of the wiki repo to store the pictures in
#+   - Get the dasbhoard URLs we are interested in from testgrid's 'summary'
#+     endpoint
#+   - Use 'render-tron.appspot.com' to create screenshots of the testgrid
#+     boards
#+   - Create a new commit in the wiki repo with all gathered pictures and push
#+     that upstream
#+   - Print a markdown stub, which links to the images on the GitHub wiki, on
#+     StdOut
#+

set -o errexit
set -o nounset
set -o pipefail

readonly BOARDS="${BOARDS:-blocking informing}"
# Available states: FAILING, FLAKY, PASSING
readonly STATES="${STATES:-FAILING}"
readonly BLOCK_WIDTH="${BLOCK_WIDTH:-30}"
readonly WIDTH="${WIDTH:-3000}"
readonly HEIGHT="${HEIGHT:-2500}"
readonly RETRY_COUNT="${RETRY_COUNT:-3}"
readonly RETRY_SLEEP="${RETRY_SLEEP:-2}"
readonly WIKI_SLUG="${WIKI_SLUG:-kubernetes/release}"

readonly TESTGRID='https://testgrid.k8s.io'
readonly RENDER_TRON='https://render-tron.appspot.com/screenshot'
readonly ISSUE_STUB_SUFFIX='issue.'
readonly WIKI_GIT_URL="https://github.com/${WIKI_SLUG}.wiki.git"
readonly WIKI_USER_NAME='testgridshot helper'
readonly WIKI_USER_EMAIL='release-managers+testgridshot@kubernetes.io'

get_tests_by_status() {
  local status="$1"
  shift

  local board

  for board in "$@"
  do
    curl_with_retry --retry 0 "${TESTGRID}/${board}/summary" 2>/dev/null \
      | jq --arg status "$status" -r '
        to_entries[]
          | select(.value.overall_status==$status)
          | .value.dashboard_name + "#" + .key
      '
  done
}

urlencode() {
  echo "$1" | jq -sRr @uri
}

gen_file_name() {
  echo "${1//[^a-zA-Z0-9]/_}"
}

curl_with_retry() {
  curl -fqsSL --retry "$RETRY_COUNT" --retry-delay "$RETRY_SLEEP" "$@"
}

log() {
  echo "$(get_timestamp) ${*}" >&2
}

screenshot() {
  local url="$1"
  local target="$2"
  local url_encoded rendertron_url

  url_encoded="$( urlencode "${url}" )"
  rendertron_url="${RENDER_TRON}/${url_encoded}?width=${WIDTH}&height=${HEIGHT}"

  curl_with_retry -o "${target}" "$rendertron_url"
}

get_issue_stub_name() {
  local dir="$1"
  local idx="$2"
  printf '%s/%s%05d' "$dir" "$ISSUE_STUB_SUFFIX" "$idx"
}

combine_issue_stubs() {
  local dir="$1"
  find "$dir" -maxdepth 1 -mindepth 1 -name "${ISSUE_STUB_SUFFIX}*" \
    | sort -n \
    | xargs cat
}

get_timestamp() {
  date '+%Y-%m-%d %H:%M:%S%z'
}

comma_sep() {
  echo "$*" \
    | sed -e 's@^\s\+@@' -e 's@\s\+$@@' -e 's@\s\+@, @g'
}

get_header_stub() {
  local board

  echo '### Testgrid dashboards'

  echo "Boards checked for $(comma_sep "${STATES}"):"

  for board in "$@"
  do
    printf -- '- [%s](%s)\n' "$board" "${TESTGRID}/${board}"
  done
}

usage() {
  local usage_marker='^#\\+ ?'
  # shellcheck disable=SC2016
  local awk_prog='$0 ~ RE { gsub(RE, ""); print }'

  awk -vRE="$usage_marker" "$awk_prog" <"$0" >&2
}

wiki_git_with_creds() {
  # run all this in a subshell, so we can set up a trap handler without
  # overriding the other/"outer" trap handler
  (
    local cred_helper

    cred_helper="$( mktemp )"
    trap 'rm -f -- "$cred_helper"' EXIT
    chmod 0600 "$cred_helper"
    echo "echo username=${GITHUB_TOKEN}" >> "$cred_helper"
    echo "echo password=x-oauth-basic"   >> "$cred_helper"

    local git_args=(
      '-c' "user.email=${WIKI_USER_EMAIL}"
      '-c' "user.name=${WIKI_USER_NAME} ($USER)"
      # the cred helper needs to be unset first before we can set up a custom
      # one ¯\_(ツ)_/¯
      '-c' "credential.helper="
      '-c' "credential.helper=/usr/bin/env bash '${cred_helper}'"
    )

    # overriding $HOME has the effect that git does not (cannot) read user's
    # git configurations. This is helpful for cases where `url.xxxx.insteadOf`
    # is set up. NUL is not allowed in filenames, so we can be fairly certain
    # that nobody will be able to plant a malicious config there.
    HOME=$'\0' \
      git "${git_args[@]}" "$@" >/dev/null
  )
}

get_wiki_dir() {
  printf '%s/.wiki' "$1"
}

wiki_clone() {
  local wiki_base_dir dest_dir

  wiki_base_dir="$( get_wiki_dir "$1" )"

  wiki_git_with_creds clone --depth=1 --quiet "$WIKI_GIT_URL" "$wiki_base_dir"

  dest_dir="${wiki_base_dir}/testgridshot/$(date '+%Y-%m-%d_%H-%M-%S')_$(openssl rand -hex 4)"
  mkdir -p "$dest_dir"
  echo "$dest_dir"
}

wiki_push() {
  local wiki_base_dir

  wiki_base_dir="$( get_wiki_dir "$1" )"

  wiki_git_with_creds -C "$wiki_base_dir" add .
  wiki_git_with_creds -C "$wiki_base_dir" commit --quiet -m "testgridshot by ${USER}"
  wiki_git_with_creds -C "$wiki_base_dir" push --quiet
}

get_image_url() {
  local file_name="$1"
  local wiki_base_dir
  local wiki_base_url="https://raw.githubusercontent.com/wiki/${WIKI_SLUG}"

  wiki_base_dir="$( get_wiki_dir "$2" )"

  # Replace the local path to the wiki's repo with the URL to the wiki but keep
  # the relative path from the wiki's base dir and the file name the same.
  echo "${file_name/#${wiki_base_dir}/${wiki_base_url}}"
}

shoot() {
  local target_release="$1"
  local boards
  local tests t s
  local idx=0
  local wiki_dir

  tmp_dir="$( mktemp -d )"
  trap 'rm -rf -- "$tmp_dir"' EXIT

  log "pulling in '${WIKI_GIT_URL}' to store the images in"
  wiki_dir="$( wiki_clone "$tmp_dir" )"

  read -r -a boards <<< "$BOARDS"
  # prepend all elements with 'sig-release-<release>-' to form the full
  # testgrid dashborad name
  boards=( "${boards[@]/#/sig-release-${target_release}-}" )

  get_header_stub "${boards[@]}" > "$( get_issue_stub_name "${tmp_dir}" "${idx}" )"

  for s in ${STATES}
  do
    mapfile -t tests <<< "$(get_tests_by_status "$s" "${boards[@]}")"
    for t in "${tests[@]}"
    do
      [ -n "${t}" ] || continue

      idx=$(( idx + 1 ))
      (
        local testgrid_url timestamp file_name image_url file_base_name file_size issue_stub_name

        local_log() {
          log "[${idx}]" "$@"
        }

        local_log "starting ${t}"

        testgrid_url="${TESTGRID}/${t}&width=${BLOCK_WIDTH}"
        file_name="${wiki_dir}/$( gen_file_name "${t}" ).jpg"
        file_base_name="$(basename "$file_name")"
        issue_stub_name="$( get_issue_stub_name "$tmp_dir" "$idx" )"

        # create & download screenshot
        local_log "screenshoting ${testgrid_url} to ${file_base_name}"
        screenshot "${testgrid_url}" "${file_name}"

        # when did we successfully capture that image?
        timestamp="$( get_timestamp )"

        # convert the local file path to the URL the image will be available at
        image_url="$( get_image_url "$file_name" "$tmp_dir" )"

        read -r file_size <<< "$(wc -c < "$file_name")"
        local_log "${file_base_name}: ${file_size} bytes"

        # generate issue section
        local_log "generating markdown stub"
        printf \
          '\n<details><summary><tt>%s</tt> %s %s <a href="%s">[testgrid]</a></summary><p>\n\n![%s](%s)\n</p></details>\n' \
          "${timestamp}" "${s}" "${t}" "${testgrid_url}" "${t}" "${image_url}" \
          > "$issue_stub_name"

        local_log "done, image will be available at ${image_url}"
      )&
    done
  done

  wait

  if [[ $idx -lt 1 ]]; then
    log "no $(comma_sep "${STATES}") tests found"
    return
  fi

  log "uploading images to '${WIKI_GIT_URL}'"
  wiki_push "$tmp_dir"

  echo

  echo '<!-- ----[ issue comment ]---- -->'
  combine_issue_stubs "${tmp_dir}"
  echo '<!-- ----[ issue comment ]---- -->'
}

main() {
  local target_release="${1:-}"

  if [ -z "$target_release" ]; then
    usage
    exit
  fi

  : "${GITHUB_TOKEN?must be set, so we can push images to the ${WIKI_SLUG} wiki}"
  readonly GITHUB_TOKEN

  shoot "$target_release"
}

main "$@"
