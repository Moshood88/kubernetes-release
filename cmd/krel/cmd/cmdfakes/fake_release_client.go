/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"sync"

	"k8s.io/release/pkg/release"
)

type FakeReleaseClient struct {
	SetBuildVersionStub        func(string, []string) (string, error)
	setBuildVersionMutex       sync.RWMutex
	setBuildVersionArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	setBuildVersionReturns struct {
		result1 string
		result2 error
	}
	setBuildVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SetReleaseVersionStub        func(string, string, string) (*release.Versions, error)
	setReleaseVersionMutex       sync.RWMutex
	setReleaseVersionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	setReleaseVersionReturns struct {
		result1 *release.Versions
		result2 error
	}
	setReleaseVersionReturnsOnCall map[int]struct {
		result1 *release.Versions
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReleaseClient) SetBuildVersion(arg1 string, arg2 []string) (string, error) {
	var arg2Copy []string
	if arg2 != nil {
		arg2Copy = make([]string, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.setBuildVersionMutex.Lock()
	ret, specificReturn := fake.setBuildVersionReturnsOnCall[len(fake.setBuildVersionArgsForCall)]
	fake.setBuildVersionArgsForCall = append(fake.setBuildVersionArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2Copy})
	fake.recordInvocation("SetBuildVersion", []interface{}{arg1, arg2Copy})
	fake.setBuildVersionMutex.Unlock()
	if fake.SetBuildVersionStub != nil {
		return fake.SetBuildVersionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setBuildVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReleaseClient) SetBuildVersionCallCount() int {
	fake.setBuildVersionMutex.RLock()
	defer fake.setBuildVersionMutex.RUnlock()
	return len(fake.setBuildVersionArgsForCall)
}

func (fake *FakeReleaseClient) SetBuildVersionCalls(stub func(string, []string) (string, error)) {
	fake.setBuildVersionMutex.Lock()
	defer fake.setBuildVersionMutex.Unlock()
	fake.SetBuildVersionStub = stub
}

func (fake *FakeReleaseClient) SetBuildVersionArgsForCall(i int) (string, []string) {
	fake.setBuildVersionMutex.RLock()
	defer fake.setBuildVersionMutex.RUnlock()
	argsForCall := fake.setBuildVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReleaseClient) SetBuildVersionReturns(result1 string, result2 error) {
	fake.setBuildVersionMutex.Lock()
	defer fake.setBuildVersionMutex.Unlock()
	fake.SetBuildVersionStub = nil
	fake.setBuildVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseClient) SetBuildVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.setBuildVersionMutex.Lock()
	defer fake.setBuildVersionMutex.Unlock()
	fake.SetBuildVersionStub = nil
	if fake.setBuildVersionReturnsOnCall == nil {
		fake.setBuildVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.setBuildVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseClient) SetReleaseVersion(arg1 string, arg2 string, arg3 string) (*release.Versions, error) {
	fake.setReleaseVersionMutex.Lock()
	ret, specificReturn := fake.setReleaseVersionReturnsOnCall[len(fake.setReleaseVersionArgsForCall)]
	fake.setReleaseVersionArgsForCall = append(fake.setReleaseVersionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetReleaseVersion", []interface{}{arg1, arg2, arg3})
	fake.setReleaseVersionMutex.Unlock()
	if fake.SetReleaseVersionStub != nil {
		return fake.SetReleaseVersionStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.setReleaseVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReleaseClient) SetReleaseVersionCallCount() int {
	fake.setReleaseVersionMutex.RLock()
	defer fake.setReleaseVersionMutex.RUnlock()
	return len(fake.setReleaseVersionArgsForCall)
}

func (fake *FakeReleaseClient) SetReleaseVersionCalls(stub func(string, string, string) (*release.Versions, error)) {
	fake.setReleaseVersionMutex.Lock()
	defer fake.setReleaseVersionMutex.Unlock()
	fake.SetReleaseVersionStub = stub
}

func (fake *FakeReleaseClient) SetReleaseVersionArgsForCall(i int) (string, string, string) {
	fake.setReleaseVersionMutex.RLock()
	defer fake.setReleaseVersionMutex.RUnlock()
	argsForCall := fake.setReleaseVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReleaseClient) SetReleaseVersionReturns(result1 *release.Versions, result2 error) {
	fake.setReleaseVersionMutex.Lock()
	defer fake.setReleaseVersionMutex.Unlock()
	fake.SetReleaseVersionStub = nil
	fake.setReleaseVersionReturns = struct {
		result1 *release.Versions
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseClient) SetReleaseVersionReturnsOnCall(i int, result1 *release.Versions, result2 error) {
	fake.setReleaseVersionMutex.Lock()
	defer fake.setReleaseVersionMutex.Unlock()
	fake.SetReleaseVersionStub = nil
	if fake.setReleaseVersionReturnsOnCall == nil {
		fake.setReleaseVersionReturnsOnCall = make(map[int]struct {
			result1 *release.Versions
			result2 error
		})
	}
	fake.setReleaseVersionReturnsOnCall[i] = struct {
		result1 *release.Versions
		result2 error
	}{result1, result2}
}

func (fake *FakeReleaseClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setBuildVersionMutex.RLock()
	defer fake.setBuildVersionMutex.RUnlock()
	fake.setReleaseVersionMutex.RLock()
	defer fake.setReleaseVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReleaseClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
