/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package packagesfakes

import (
	"sync"

	semver "github.com/blang/semver/v4"
	"sigs.k8s.io/release-sdk/object"
)

type FakeImpl struct {
	ChdirStub        func(string) error
	chdirMutex       sync.RWMutex
	chdirArgsForCall []struct {
		arg1 string
	}
	chdirReturns struct {
		result1 error
	}
	chdirReturnsOnCall map[int]struct {
		result1 error
	}
	CopyToRemoteStub        func(*object.GCS, string, string) error
	copyToRemoteMutex       sync.RWMutex
	copyToRemoteArgsForCall []struct {
		arg1 *object.GCS
		arg2 string
		arg3 string
	}
	copyToRemoteReturns struct {
		result1 error
	}
	copyToRemoteReturnsOnCall map[int]struct {
		result1 error
	}
	GetwdStub        func() (string, error)
	getwdMutex       sync.RWMutex
	getwdArgsForCall []struct {
	}
	getwdReturns struct {
		result1 string
		result2 error
	}
	getwdReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	NormalizePathStub        func(*object.GCS, ...string) (string, error)
	normalizePathMutex       sync.RWMutex
	normalizePathArgsForCall []struct {
		arg1 *object.GCS
		arg2 []string
	}
	normalizePathReturns struct {
		result1 string
		result2 error
	}
	normalizePathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RunCommandStub        func(string, ...string) error
	runCommandMutex       sync.RWMutex
	runCommandArgsForCall []struct {
		arg1 string
		arg2 []string
	}
	runCommandReturns struct {
		result1 error
	}
	runCommandReturnsOnCall map[int]struct {
		result1 error
	}
	TagStringToSemverStub        func(string) (semver.Version, error)
	tagStringToSemverMutex       sync.RWMutex
	tagStringToSemverArgsForCall []struct {
		arg1 string
	}
	tagStringToSemverReturns struct {
		result1 semver.Version
		result2 error
	}
	tagStringToSemverReturnsOnCall map[int]struct {
		result1 semver.Version
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) Chdir(arg1 string) error {
	fake.chdirMutex.Lock()
	ret, specificReturn := fake.chdirReturnsOnCall[len(fake.chdirArgsForCall)]
	fake.chdirArgsForCall = append(fake.chdirArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ChdirStub
	fakeReturns := fake.chdirReturns
	fake.recordInvocation("Chdir", []interface{}{arg1})
	fake.chdirMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) ChdirCallCount() int {
	fake.chdirMutex.RLock()
	defer fake.chdirMutex.RUnlock()
	return len(fake.chdirArgsForCall)
}

func (fake *FakeImpl) ChdirCalls(stub func(string) error) {
	fake.chdirMutex.Lock()
	defer fake.chdirMutex.Unlock()
	fake.ChdirStub = stub
}

func (fake *FakeImpl) ChdirArgsForCall(i int) string {
	fake.chdirMutex.RLock()
	defer fake.chdirMutex.RUnlock()
	argsForCall := fake.chdirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ChdirReturns(result1 error) {
	fake.chdirMutex.Lock()
	defer fake.chdirMutex.Unlock()
	fake.ChdirStub = nil
	fake.chdirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) ChdirReturnsOnCall(i int, result1 error) {
	fake.chdirMutex.Lock()
	defer fake.chdirMutex.Unlock()
	fake.ChdirStub = nil
	if fake.chdirReturnsOnCall == nil {
		fake.chdirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.chdirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) CopyToRemote(arg1 *object.GCS, arg2 string, arg3 string) error {
	fake.copyToRemoteMutex.Lock()
	ret, specificReturn := fake.copyToRemoteReturnsOnCall[len(fake.copyToRemoteArgsForCall)]
	fake.copyToRemoteArgsForCall = append(fake.copyToRemoteArgsForCall, struct {
		arg1 *object.GCS
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CopyToRemoteStub
	fakeReturns := fake.copyToRemoteReturns
	fake.recordInvocation("CopyToRemote", []interface{}{arg1, arg2, arg3})
	fake.copyToRemoteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) CopyToRemoteCallCount() int {
	fake.copyToRemoteMutex.RLock()
	defer fake.copyToRemoteMutex.RUnlock()
	return len(fake.copyToRemoteArgsForCall)
}

func (fake *FakeImpl) CopyToRemoteCalls(stub func(*object.GCS, string, string) error) {
	fake.copyToRemoteMutex.Lock()
	defer fake.copyToRemoteMutex.Unlock()
	fake.CopyToRemoteStub = stub
}

func (fake *FakeImpl) CopyToRemoteArgsForCall(i int) (*object.GCS, string, string) {
	fake.copyToRemoteMutex.RLock()
	defer fake.copyToRemoteMutex.RUnlock()
	argsForCall := fake.copyToRemoteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeImpl) CopyToRemoteReturns(result1 error) {
	fake.copyToRemoteMutex.Lock()
	defer fake.copyToRemoteMutex.Unlock()
	fake.CopyToRemoteStub = nil
	fake.copyToRemoteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) CopyToRemoteReturnsOnCall(i int, result1 error) {
	fake.copyToRemoteMutex.Lock()
	defer fake.copyToRemoteMutex.Unlock()
	fake.CopyToRemoteStub = nil
	if fake.copyToRemoteReturnsOnCall == nil {
		fake.copyToRemoteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyToRemoteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Getwd() (string, error) {
	fake.getwdMutex.Lock()
	ret, specificReturn := fake.getwdReturnsOnCall[len(fake.getwdArgsForCall)]
	fake.getwdArgsForCall = append(fake.getwdArgsForCall, struct {
	}{})
	stub := fake.GetwdStub
	fakeReturns := fake.getwdReturns
	fake.recordInvocation("Getwd", []interface{}{})
	fake.getwdMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetwdCallCount() int {
	fake.getwdMutex.RLock()
	defer fake.getwdMutex.RUnlock()
	return len(fake.getwdArgsForCall)
}

func (fake *FakeImpl) GetwdCalls(stub func() (string, error)) {
	fake.getwdMutex.Lock()
	defer fake.getwdMutex.Unlock()
	fake.GetwdStub = stub
}

func (fake *FakeImpl) GetwdReturns(result1 string, result2 error) {
	fake.getwdMutex.Lock()
	defer fake.getwdMutex.Unlock()
	fake.GetwdStub = nil
	fake.getwdReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetwdReturnsOnCall(i int, result1 string, result2 error) {
	fake.getwdMutex.Lock()
	defer fake.getwdMutex.Unlock()
	fake.GetwdStub = nil
	if fake.getwdReturnsOnCall == nil {
		fake.getwdReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getwdReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) NormalizePath(arg1 *object.GCS, arg2 ...string) (string, error) {
	fake.normalizePathMutex.Lock()
	ret, specificReturn := fake.normalizePathReturnsOnCall[len(fake.normalizePathArgsForCall)]
	fake.normalizePathArgsForCall = append(fake.normalizePathArgsForCall, struct {
		arg1 *object.GCS
		arg2 []string
	}{arg1, arg2})
	stub := fake.NormalizePathStub
	fakeReturns := fake.normalizePathReturns
	fake.recordInvocation("NormalizePath", []interface{}{arg1, arg2})
	fake.normalizePathMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) NormalizePathCallCount() int {
	fake.normalizePathMutex.RLock()
	defer fake.normalizePathMutex.RUnlock()
	return len(fake.normalizePathArgsForCall)
}

func (fake *FakeImpl) NormalizePathCalls(stub func(*object.GCS, ...string) (string, error)) {
	fake.normalizePathMutex.Lock()
	defer fake.normalizePathMutex.Unlock()
	fake.NormalizePathStub = stub
}

func (fake *FakeImpl) NormalizePathArgsForCall(i int) (*object.GCS, []string) {
	fake.normalizePathMutex.RLock()
	defer fake.normalizePathMutex.RUnlock()
	argsForCall := fake.normalizePathArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) NormalizePathReturns(result1 string, result2 error) {
	fake.normalizePathMutex.Lock()
	defer fake.normalizePathMutex.Unlock()
	fake.NormalizePathStub = nil
	fake.normalizePathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) NormalizePathReturnsOnCall(i int, result1 string, result2 error) {
	fake.normalizePathMutex.Lock()
	defer fake.normalizePathMutex.Unlock()
	fake.NormalizePathStub = nil
	if fake.normalizePathReturnsOnCall == nil {
		fake.normalizePathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.normalizePathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) RunCommand(arg1 string, arg2 ...string) error {
	fake.runCommandMutex.Lock()
	ret, specificReturn := fake.runCommandReturnsOnCall[len(fake.runCommandArgsForCall)]
	fake.runCommandArgsForCall = append(fake.runCommandArgsForCall, struct {
		arg1 string
		arg2 []string
	}{arg1, arg2})
	stub := fake.RunCommandStub
	fakeReturns := fake.runCommandReturns
	fake.recordInvocation("RunCommand", []interface{}{arg1, arg2})
	fake.runCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) RunCommandCallCount() int {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	return len(fake.runCommandArgsForCall)
}

func (fake *FakeImpl) RunCommandCalls(stub func(string, ...string) error) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = stub
}

func (fake *FakeImpl) RunCommandArgsForCall(i int) (string, []string) {
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	argsForCall := fake.runCommandArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeImpl) RunCommandReturns(result1 error) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	fake.runCommandReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) RunCommandReturnsOnCall(i int, result1 error) {
	fake.runCommandMutex.Lock()
	defer fake.runCommandMutex.Unlock()
	fake.RunCommandStub = nil
	if fake.runCommandReturnsOnCall == nil {
		fake.runCommandReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runCommandReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) TagStringToSemver(arg1 string) (semver.Version, error) {
	fake.tagStringToSemverMutex.Lock()
	ret, specificReturn := fake.tagStringToSemverReturnsOnCall[len(fake.tagStringToSemverArgsForCall)]
	fake.tagStringToSemverArgsForCall = append(fake.tagStringToSemverArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.TagStringToSemverStub
	fakeReturns := fake.tagStringToSemverReturns
	fake.recordInvocation("TagStringToSemver", []interface{}{arg1})
	fake.tagStringToSemverMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) TagStringToSemverCallCount() int {
	fake.tagStringToSemverMutex.RLock()
	defer fake.tagStringToSemverMutex.RUnlock()
	return len(fake.tagStringToSemverArgsForCall)
}

func (fake *FakeImpl) TagStringToSemverCalls(stub func(string) (semver.Version, error)) {
	fake.tagStringToSemverMutex.Lock()
	defer fake.tagStringToSemverMutex.Unlock()
	fake.TagStringToSemverStub = stub
}

func (fake *FakeImpl) TagStringToSemverArgsForCall(i int) string {
	fake.tagStringToSemverMutex.RLock()
	defer fake.tagStringToSemverMutex.RUnlock()
	argsForCall := fake.tagStringToSemverArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) TagStringToSemverReturns(result1 semver.Version, result2 error) {
	fake.tagStringToSemverMutex.Lock()
	defer fake.tagStringToSemverMutex.Unlock()
	fake.TagStringToSemverStub = nil
	fake.tagStringToSemverReturns = struct {
		result1 semver.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) TagStringToSemverReturnsOnCall(i int, result1 semver.Version, result2 error) {
	fake.tagStringToSemverMutex.Lock()
	defer fake.tagStringToSemverMutex.Unlock()
	fake.TagStringToSemverStub = nil
	if fake.tagStringToSemverReturnsOnCall == nil {
		fake.tagStringToSemverReturnsOnCall = make(map[int]struct {
			result1 semver.Version
			result2 error
		})
	}
	fake.tagStringToSemverReturnsOnCall[i] = struct {
		result1 semver.Version
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.chdirMutex.RLock()
	defer fake.chdirMutex.RUnlock()
	fake.copyToRemoteMutex.RLock()
	defer fake.copyToRemoteMutex.RUnlock()
	fake.getwdMutex.RLock()
	defer fake.getwdMutex.RUnlock()
	fake.normalizePathMutex.RLock()
	defer fake.normalizePathMutex.RUnlock()
	fake.runCommandMutex.RLock()
	defer fake.runCommandMutex.RUnlock()
	fake.tagStringToSemverMutex.RLock()
	defer fake.tagStringToSemverMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
