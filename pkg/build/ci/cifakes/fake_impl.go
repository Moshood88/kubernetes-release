/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package cifakes

import (
	"sync"

	"k8s.io/release/pkg/build"
	"k8s.io/release/pkg/build/ci"
)

type FakeImpl struct {
	BuildStub        func(*build.Options) error
	buildMutex       sync.RWMutex
	buildArgsForCall []struct {
		arg1 *build.Options
	}
	buildReturns struct {
		result1 error
	}
	buildReturnsOnCall map[int]struct {
		result1 error
	}
	CheckBuildExistsStub        func() (bool, error)
	checkBuildExistsMutex       sync.RWMutex
	checkBuildExistsArgsForCall []struct {
	}
	checkBuildExistsReturns struct {
		result1 bool
		result2 error
	}
	checkBuildExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ConfigureDockerAuthStub        func(*ci.Options) error
	configureDockerAuthMutex       sync.RWMutex
	configureDockerAuthArgsForCall []struct {
		arg1 *ci.Options
	}
	configureDockerAuthReturns struct {
		result1 error
	}
	configureDockerAuthReturnsOnCall map[int]struct {
		result1 error
	}
	GCSPathsExistStub        func([]string) (bool, []error)
	gCSPathsExistMutex       sync.RWMutex
	gCSPathsExistArgsForCall []struct {
		arg1 []string
	}
	gCSPathsExistReturns struct {
		result1 bool
		result2 []error
	}
	gCSPathsExistReturnsOnCall map[int]struct {
		result1 bool
		result2 []error
	}
	GetGCSBuildPathsStub        func(*ci.Options) ([]string, error)
	getGCSBuildPathsMutex       sync.RWMutex
	getGCSBuildPathsArgsForCall []struct {
		arg1 *ci.Options
	}
	getGCSBuildPathsReturns struct {
		result1 []string
		result2 error
	}
	getGCSBuildPathsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetWorkspaceVersionStub        func() (string, error)
	getWorkspaceVersionMutex       sync.RWMutex
	getWorkspaceVersionArgsForCall []struct {
	}
	getWorkspaceVersionReturns struct {
		result1 string
		result2 error
	}
	getWorkspaceVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ImagesExistStub        func(*ci.Options) (bool, error)
	imagesExistMutex       sync.RWMutex
	imagesExistArgsForCall []struct {
		arg1 *ci.Options
	}
	imagesExistReturns struct {
		result1 bool
		result2 error
	}
	imagesExistReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsKubernetesRepoStub        func() (bool, error)
	isKubernetesRepoMutex       sync.RWMutex
	isKubernetesRepoArgsForCall []struct {
	}
	isKubernetesRepoReturns struct {
		result1 bool
		result2 error
	}
	isKubernetesRepoReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	MakeCleanStub        func() error
	makeCleanMutex       sync.RWMutex
	makeCleanArgsForCall []struct {
	}
	makeCleanReturns struct {
		result1 error
	}
	makeCleanReturnsOnCall map[int]struct {
		result1 error
	}
	MakeReleaseStub        func(string) error
	makeReleaseMutex       sync.RWMutex
	makeReleaseArgsForCall []struct {
		arg1 string
	}
	makeReleaseReturns struct {
		result1 error
	}
	makeReleaseReturnsOnCall map[int]struct {
		result1 error
	}
	PushStub        func(*ci.Options) error
	pushMutex       sync.RWMutex
	pushArgsForCall []struct {
		arg1 *ci.Options
	}
	pushReturns struct {
		result1 error
	}
	pushReturnsOnCall map[int]struct {
		result1 error
	}
	SetReleaseTypeStub        func(*ci.Options) string
	setReleaseTypeMutex       sync.RWMutex
	setReleaseTypeArgsForCall []struct {
		arg1 *ci.Options
	}
	setReleaseTypeReturns struct {
		result1 string
	}
	setReleaseTypeReturnsOnCall map[int]struct {
		result1 string
	}
	SetRunTestsEnvVarStub        func() error
	setRunTestsEnvVarMutex       sync.RWMutex
	setRunTestsEnvVarArgsForCall []struct {
	}
	setRunTestsEnvVarReturns struct {
		result1 error
	}
	setRunTestsEnvVarReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImpl) Build(arg1 *build.Options) error {
	fake.buildMutex.Lock()
	ret, specificReturn := fake.buildReturnsOnCall[len(fake.buildArgsForCall)]
	fake.buildArgsForCall = append(fake.buildArgsForCall, struct {
		arg1 *build.Options
	}{arg1})
	stub := fake.BuildStub
	fakeReturns := fake.buildReturns
	fake.recordInvocation("Build", []interface{}{arg1})
	fake.buildMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) BuildCallCount() int {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	return len(fake.buildArgsForCall)
}

func (fake *FakeImpl) BuildCalls(stub func(*build.Options) error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = stub
}

func (fake *FakeImpl) BuildArgsForCall(i int) *build.Options {
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	argsForCall := fake.buildArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) BuildReturns(result1 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	fake.buildReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) BuildReturnsOnCall(i int, result1 error) {
	fake.buildMutex.Lock()
	defer fake.buildMutex.Unlock()
	fake.BuildStub = nil
	if fake.buildReturnsOnCall == nil {
		fake.buildReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.buildReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) CheckBuildExists() (bool, error) {
	fake.checkBuildExistsMutex.Lock()
	ret, specificReturn := fake.checkBuildExistsReturnsOnCall[len(fake.checkBuildExistsArgsForCall)]
	fake.checkBuildExistsArgsForCall = append(fake.checkBuildExistsArgsForCall, struct {
	}{})
	stub := fake.CheckBuildExistsStub
	fakeReturns := fake.checkBuildExistsReturns
	fake.recordInvocation("CheckBuildExists", []interface{}{})
	fake.checkBuildExistsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) CheckBuildExistsCallCount() int {
	fake.checkBuildExistsMutex.RLock()
	defer fake.checkBuildExistsMutex.RUnlock()
	return len(fake.checkBuildExistsArgsForCall)
}

func (fake *FakeImpl) CheckBuildExistsCalls(stub func() (bool, error)) {
	fake.checkBuildExistsMutex.Lock()
	defer fake.checkBuildExistsMutex.Unlock()
	fake.CheckBuildExistsStub = stub
}

func (fake *FakeImpl) CheckBuildExistsReturns(result1 bool, result2 error) {
	fake.checkBuildExistsMutex.Lock()
	defer fake.checkBuildExistsMutex.Unlock()
	fake.CheckBuildExistsStub = nil
	fake.checkBuildExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) CheckBuildExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkBuildExistsMutex.Lock()
	defer fake.checkBuildExistsMutex.Unlock()
	fake.CheckBuildExistsStub = nil
	if fake.checkBuildExistsReturnsOnCall == nil {
		fake.checkBuildExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkBuildExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ConfigureDockerAuth(arg1 *ci.Options) error {
	fake.configureDockerAuthMutex.Lock()
	ret, specificReturn := fake.configureDockerAuthReturnsOnCall[len(fake.configureDockerAuthArgsForCall)]
	fake.configureDockerAuthArgsForCall = append(fake.configureDockerAuthArgsForCall, struct {
		arg1 *ci.Options
	}{arg1})
	stub := fake.ConfigureDockerAuthStub
	fakeReturns := fake.configureDockerAuthReturns
	fake.recordInvocation("ConfigureDockerAuth", []interface{}{arg1})
	fake.configureDockerAuthMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) ConfigureDockerAuthCallCount() int {
	fake.configureDockerAuthMutex.RLock()
	defer fake.configureDockerAuthMutex.RUnlock()
	return len(fake.configureDockerAuthArgsForCall)
}

func (fake *FakeImpl) ConfigureDockerAuthCalls(stub func(*ci.Options) error) {
	fake.configureDockerAuthMutex.Lock()
	defer fake.configureDockerAuthMutex.Unlock()
	fake.ConfigureDockerAuthStub = stub
}

func (fake *FakeImpl) ConfigureDockerAuthArgsForCall(i int) *ci.Options {
	fake.configureDockerAuthMutex.RLock()
	defer fake.configureDockerAuthMutex.RUnlock()
	argsForCall := fake.configureDockerAuthArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ConfigureDockerAuthReturns(result1 error) {
	fake.configureDockerAuthMutex.Lock()
	defer fake.configureDockerAuthMutex.Unlock()
	fake.ConfigureDockerAuthStub = nil
	fake.configureDockerAuthReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) ConfigureDockerAuthReturnsOnCall(i int, result1 error) {
	fake.configureDockerAuthMutex.Lock()
	defer fake.configureDockerAuthMutex.Unlock()
	fake.ConfigureDockerAuthStub = nil
	if fake.configureDockerAuthReturnsOnCall == nil {
		fake.configureDockerAuthReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.configureDockerAuthReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) GCSPathsExist(arg1 []string) (bool, []error) {
	var arg1Copy []string
	if arg1 != nil {
		arg1Copy = make([]string, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.gCSPathsExistMutex.Lock()
	ret, specificReturn := fake.gCSPathsExistReturnsOnCall[len(fake.gCSPathsExistArgsForCall)]
	fake.gCSPathsExistArgsForCall = append(fake.gCSPathsExistArgsForCall, struct {
		arg1 []string
	}{arg1Copy})
	stub := fake.GCSPathsExistStub
	fakeReturns := fake.gCSPathsExistReturns
	fake.recordInvocation("GCSPathsExist", []interface{}{arg1Copy})
	fake.gCSPathsExistMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GCSPathsExistCallCount() int {
	fake.gCSPathsExistMutex.RLock()
	defer fake.gCSPathsExistMutex.RUnlock()
	return len(fake.gCSPathsExistArgsForCall)
}

func (fake *FakeImpl) GCSPathsExistCalls(stub func([]string) (bool, []error)) {
	fake.gCSPathsExistMutex.Lock()
	defer fake.gCSPathsExistMutex.Unlock()
	fake.GCSPathsExistStub = stub
}

func (fake *FakeImpl) GCSPathsExistArgsForCall(i int) []string {
	fake.gCSPathsExistMutex.RLock()
	defer fake.gCSPathsExistMutex.RUnlock()
	argsForCall := fake.gCSPathsExistArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) GCSPathsExistReturns(result1 bool, result2 []error) {
	fake.gCSPathsExistMutex.Lock()
	defer fake.gCSPathsExistMutex.Unlock()
	fake.GCSPathsExistStub = nil
	fake.gCSPathsExistReturns = struct {
		result1 bool
		result2 []error
	}{result1, result2}
}

func (fake *FakeImpl) GCSPathsExistReturnsOnCall(i int, result1 bool, result2 []error) {
	fake.gCSPathsExistMutex.Lock()
	defer fake.gCSPathsExistMutex.Unlock()
	fake.GCSPathsExistStub = nil
	if fake.gCSPathsExistReturnsOnCall == nil {
		fake.gCSPathsExistReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 []error
		})
	}
	fake.gCSPathsExistReturnsOnCall[i] = struct {
		result1 bool
		result2 []error
	}{result1, result2}
}

func (fake *FakeImpl) GetGCSBuildPaths(arg1 *ci.Options) ([]string, error) {
	fake.getGCSBuildPathsMutex.Lock()
	ret, specificReturn := fake.getGCSBuildPathsReturnsOnCall[len(fake.getGCSBuildPathsArgsForCall)]
	fake.getGCSBuildPathsArgsForCall = append(fake.getGCSBuildPathsArgsForCall, struct {
		arg1 *ci.Options
	}{arg1})
	stub := fake.GetGCSBuildPathsStub
	fakeReturns := fake.getGCSBuildPathsReturns
	fake.recordInvocation("GetGCSBuildPaths", []interface{}{arg1})
	fake.getGCSBuildPathsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetGCSBuildPathsCallCount() int {
	fake.getGCSBuildPathsMutex.RLock()
	defer fake.getGCSBuildPathsMutex.RUnlock()
	return len(fake.getGCSBuildPathsArgsForCall)
}

func (fake *FakeImpl) GetGCSBuildPathsCalls(stub func(*ci.Options) ([]string, error)) {
	fake.getGCSBuildPathsMutex.Lock()
	defer fake.getGCSBuildPathsMutex.Unlock()
	fake.GetGCSBuildPathsStub = stub
}

func (fake *FakeImpl) GetGCSBuildPathsArgsForCall(i int) *ci.Options {
	fake.getGCSBuildPathsMutex.RLock()
	defer fake.getGCSBuildPathsMutex.RUnlock()
	argsForCall := fake.getGCSBuildPathsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) GetGCSBuildPathsReturns(result1 []string, result2 error) {
	fake.getGCSBuildPathsMutex.Lock()
	defer fake.getGCSBuildPathsMutex.Unlock()
	fake.GetGCSBuildPathsStub = nil
	fake.getGCSBuildPathsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetGCSBuildPathsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getGCSBuildPathsMutex.Lock()
	defer fake.getGCSBuildPathsMutex.Unlock()
	fake.GetGCSBuildPathsStub = nil
	if fake.getGCSBuildPathsReturnsOnCall == nil {
		fake.getGCSBuildPathsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getGCSBuildPathsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetWorkspaceVersion() (string, error) {
	fake.getWorkspaceVersionMutex.Lock()
	ret, specificReturn := fake.getWorkspaceVersionReturnsOnCall[len(fake.getWorkspaceVersionArgsForCall)]
	fake.getWorkspaceVersionArgsForCall = append(fake.getWorkspaceVersionArgsForCall, struct {
	}{})
	stub := fake.GetWorkspaceVersionStub
	fakeReturns := fake.getWorkspaceVersionReturns
	fake.recordInvocation("GetWorkspaceVersion", []interface{}{})
	fake.getWorkspaceVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) GetWorkspaceVersionCallCount() int {
	fake.getWorkspaceVersionMutex.RLock()
	defer fake.getWorkspaceVersionMutex.RUnlock()
	return len(fake.getWorkspaceVersionArgsForCall)
}

func (fake *FakeImpl) GetWorkspaceVersionCalls(stub func() (string, error)) {
	fake.getWorkspaceVersionMutex.Lock()
	defer fake.getWorkspaceVersionMutex.Unlock()
	fake.GetWorkspaceVersionStub = stub
}

func (fake *FakeImpl) GetWorkspaceVersionReturns(result1 string, result2 error) {
	fake.getWorkspaceVersionMutex.Lock()
	defer fake.getWorkspaceVersionMutex.Unlock()
	fake.GetWorkspaceVersionStub = nil
	fake.getWorkspaceVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) GetWorkspaceVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getWorkspaceVersionMutex.Lock()
	defer fake.getWorkspaceVersionMutex.Unlock()
	fake.GetWorkspaceVersionStub = nil
	if fake.getWorkspaceVersionReturnsOnCall == nil {
		fake.getWorkspaceVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getWorkspaceVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ImagesExist(arg1 *ci.Options) (bool, error) {
	fake.imagesExistMutex.Lock()
	ret, specificReturn := fake.imagesExistReturnsOnCall[len(fake.imagesExistArgsForCall)]
	fake.imagesExistArgsForCall = append(fake.imagesExistArgsForCall, struct {
		arg1 *ci.Options
	}{arg1})
	stub := fake.ImagesExistStub
	fakeReturns := fake.imagesExistReturns
	fake.recordInvocation("ImagesExist", []interface{}{arg1})
	fake.imagesExistMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) ImagesExistCallCount() int {
	fake.imagesExistMutex.RLock()
	defer fake.imagesExistMutex.RUnlock()
	return len(fake.imagesExistArgsForCall)
}

func (fake *FakeImpl) ImagesExistCalls(stub func(*ci.Options) (bool, error)) {
	fake.imagesExistMutex.Lock()
	defer fake.imagesExistMutex.Unlock()
	fake.ImagesExistStub = stub
}

func (fake *FakeImpl) ImagesExistArgsForCall(i int) *ci.Options {
	fake.imagesExistMutex.RLock()
	defer fake.imagesExistMutex.RUnlock()
	argsForCall := fake.imagesExistArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) ImagesExistReturns(result1 bool, result2 error) {
	fake.imagesExistMutex.Lock()
	defer fake.imagesExistMutex.Unlock()
	fake.ImagesExistStub = nil
	fake.imagesExistReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) ImagesExistReturnsOnCall(i int, result1 bool, result2 error) {
	fake.imagesExistMutex.Lock()
	defer fake.imagesExistMutex.Unlock()
	fake.ImagesExistStub = nil
	if fake.imagesExistReturnsOnCall == nil {
		fake.imagesExistReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.imagesExistReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) IsKubernetesRepo() (bool, error) {
	fake.isKubernetesRepoMutex.Lock()
	ret, specificReturn := fake.isKubernetesRepoReturnsOnCall[len(fake.isKubernetesRepoArgsForCall)]
	fake.isKubernetesRepoArgsForCall = append(fake.isKubernetesRepoArgsForCall, struct {
	}{})
	stub := fake.IsKubernetesRepoStub
	fakeReturns := fake.isKubernetesRepoReturns
	fake.recordInvocation("IsKubernetesRepo", []interface{}{})
	fake.isKubernetesRepoMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeImpl) IsKubernetesRepoCallCount() int {
	fake.isKubernetesRepoMutex.RLock()
	defer fake.isKubernetesRepoMutex.RUnlock()
	return len(fake.isKubernetesRepoArgsForCall)
}

func (fake *FakeImpl) IsKubernetesRepoCalls(stub func() (bool, error)) {
	fake.isKubernetesRepoMutex.Lock()
	defer fake.isKubernetesRepoMutex.Unlock()
	fake.IsKubernetesRepoStub = stub
}

func (fake *FakeImpl) IsKubernetesRepoReturns(result1 bool, result2 error) {
	fake.isKubernetesRepoMutex.Lock()
	defer fake.isKubernetesRepoMutex.Unlock()
	fake.IsKubernetesRepoStub = nil
	fake.isKubernetesRepoReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) IsKubernetesRepoReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isKubernetesRepoMutex.Lock()
	defer fake.isKubernetesRepoMutex.Unlock()
	fake.IsKubernetesRepoStub = nil
	if fake.isKubernetesRepoReturnsOnCall == nil {
		fake.isKubernetesRepoReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isKubernetesRepoReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeImpl) MakeClean() error {
	fake.makeCleanMutex.Lock()
	ret, specificReturn := fake.makeCleanReturnsOnCall[len(fake.makeCleanArgsForCall)]
	fake.makeCleanArgsForCall = append(fake.makeCleanArgsForCall, struct {
	}{})
	stub := fake.MakeCleanStub
	fakeReturns := fake.makeCleanReturns
	fake.recordInvocation("MakeClean", []interface{}{})
	fake.makeCleanMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) MakeCleanCallCount() int {
	fake.makeCleanMutex.RLock()
	defer fake.makeCleanMutex.RUnlock()
	return len(fake.makeCleanArgsForCall)
}

func (fake *FakeImpl) MakeCleanCalls(stub func() error) {
	fake.makeCleanMutex.Lock()
	defer fake.makeCleanMutex.Unlock()
	fake.MakeCleanStub = stub
}

func (fake *FakeImpl) MakeCleanReturns(result1 error) {
	fake.makeCleanMutex.Lock()
	defer fake.makeCleanMutex.Unlock()
	fake.MakeCleanStub = nil
	fake.makeCleanReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) MakeCleanReturnsOnCall(i int, result1 error) {
	fake.makeCleanMutex.Lock()
	defer fake.makeCleanMutex.Unlock()
	fake.MakeCleanStub = nil
	if fake.makeCleanReturnsOnCall == nil {
		fake.makeCleanReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeCleanReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) MakeRelease(arg1 string) error {
	fake.makeReleaseMutex.Lock()
	ret, specificReturn := fake.makeReleaseReturnsOnCall[len(fake.makeReleaseArgsForCall)]
	fake.makeReleaseArgsForCall = append(fake.makeReleaseArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.MakeReleaseStub
	fakeReturns := fake.makeReleaseReturns
	fake.recordInvocation("MakeRelease", []interface{}{arg1})
	fake.makeReleaseMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) MakeReleaseCallCount() int {
	fake.makeReleaseMutex.RLock()
	defer fake.makeReleaseMutex.RUnlock()
	return len(fake.makeReleaseArgsForCall)
}

func (fake *FakeImpl) MakeReleaseCalls(stub func(string) error) {
	fake.makeReleaseMutex.Lock()
	defer fake.makeReleaseMutex.Unlock()
	fake.MakeReleaseStub = stub
}

func (fake *FakeImpl) MakeReleaseArgsForCall(i int) string {
	fake.makeReleaseMutex.RLock()
	defer fake.makeReleaseMutex.RUnlock()
	argsForCall := fake.makeReleaseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) MakeReleaseReturns(result1 error) {
	fake.makeReleaseMutex.Lock()
	defer fake.makeReleaseMutex.Unlock()
	fake.MakeReleaseStub = nil
	fake.makeReleaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) MakeReleaseReturnsOnCall(i int, result1 error) {
	fake.makeReleaseMutex.Lock()
	defer fake.makeReleaseMutex.Unlock()
	fake.MakeReleaseStub = nil
	if fake.makeReleaseReturnsOnCall == nil {
		fake.makeReleaseReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeReleaseReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Push(arg1 *ci.Options) error {
	fake.pushMutex.Lock()
	ret, specificReturn := fake.pushReturnsOnCall[len(fake.pushArgsForCall)]
	fake.pushArgsForCall = append(fake.pushArgsForCall, struct {
		arg1 *ci.Options
	}{arg1})
	stub := fake.PushStub
	fakeReturns := fake.pushReturns
	fake.recordInvocation("Push", []interface{}{arg1})
	fake.pushMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) PushCallCount() int {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	return len(fake.pushArgsForCall)
}

func (fake *FakeImpl) PushCalls(stub func(*ci.Options) error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = stub
}

func (fake *FakeImpl) PushArgsForCall(i int) *ci.Options {
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	argsForCall := fake.pushArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) PushReturns(result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	fake.pushReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) PushReturnsOnCall(i int, result1 error) {
	fake.pushMutex.Lock()
	defer fake.pushMutex.Unlock()
	fake.PushStub = nil
	if fake.pushReturnsOnCall == nil {
		fake.pushReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) SetReleaseType(arg1 *ci.Options) string {
	fake.setReleaseTypeMutex.Lock()
	ret, specificReturn := fake.setReleaseTypeReturnsOnCall[len(fake.setReleaseTypeArgsForCall)]
	fake.setReleaseTypeArgsForCall = append(fake.setReleaseTypeArgsForCall, struct {
		arg1 *ci.Options
	}{arg1})
	stub := fake.SetReleaseTypeStub
	fakeReturns := fake.setReleaseTypeReturns
	fake.recordInvocation("SetReleaseType", []interface{}{arg1})
	fake.setReleaseTypeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) SetReleaseTypeCallCount() int {
	fake.setReleaseTypeMutex.RLock()
	defer fake.setReleaseTypeMutex.RUnlock()
	return len(fake.setReleaseTypeArgsForCall)
}

func (fake *FakeImpl) SetReleaseTypeCalls(stub func(*ci.Options) string) {
	fake.setReleaseTypeMutex.Lock()
	defer fake.setReleaseTypeMutex.Unlock()
	fake.SetReleaseTypeStub = stub
}

func (fake *FakeImpl) SetReleaseTypeArgsForCall(i int) *ci.Options {
	fake.setReleaseTypeMutex.RLock()
	defer fake.setReleaseTypeMutex.RUnlock()
	argsForCall := fake.setReleaseTypeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImpl) SetReleaseTypeReturns(result1 string) {
	fake.setReleaseTypeMutex.Lock()
	defer fake.setReleaseTypeMutex.Unlock()
	fake.SetReleaseTypeStub = nil
	fake.setReleaseTypeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeImpl) SetReleaseTypeReturnsOnCall(i int, result1 string) {
	fake.setReleaseTypeMutex.Lock()
	defer fake.setReleaseTypeMutex.Unlock()
	fake.SetReleaseTypeStub = nil
	if fake.setReleaseTypeReturnsOnCall == nil {
		fake.setReleaseTypeReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.setReleaseTypeReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeImpl) SetRunTestsEnvVar() error {
	fake.setRunTestsEnvVarMutex.Lock()
	ret, specificReturn := fake.setRunTestsEnvVarReturnsOnCall[len(fake.setRunTestsEnvVarArgsForCall)]
	fake.setRunTestsEnvVarArgsForCall = append(fake.setRunTestsEnvVarArgsForCall, struct {
	}{})
	stub := fake.SetRunTestsEnvVarStub
	fakeReturns := fake.setRunTestsEnvVarReturns
	fake.recordInvocation("SetRunTestsEnvVar", []interface{}{})
	fake.setRunTestsEnvVarMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImpl) SetRunTestsEnvVarCallCount() int {
	fake.setRunTestsEnvVarMutex.RLock()
	defer fake.setRunTestsEnvVarMutex.RUnlock()
	return len(fake.setRunTestsEnvVarArgsForCall)
}

func (fake *FakeImpl) SetRunTestsEnvVarCalls(stub func() error) {
	fake.setRunTestsEnvVarMutex.Lock()
	defer fake.setRunTestsEnvVarMutex.Unlock()
	fake.SetRunTestsEnvVarStub = stub
}

func (fake *FakeImpl) SetRunTestsEnvVarReturns(result1 error) {
	fake.setRunTestsEnvVarMutex.Lock()
	defer fake.setRunTestsEnvVarMutex.Unlock()
	fake.SetRunTestsEnvVarStub = nil
	fake.setRunTestsEnvVarReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) SetRunTestsEnvVarReturnsOnCall(i int, result1 error) {
	fake.setRunTestsEnvVarMutex.Lock()
	defer fake.setRunTestsEnvVarMutex.Unlock()
	fake.SetRunTestsEnvVarStub = nil
	if fake.setRunTestsEnvVarReturnsOnCall == nil {
		fake.setRunTestsEnvVarReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRunTestsEnvVarReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeImpl) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.buildMutex.RLock()
	defer fake.buildMutex.RUnlock()
	fake.checkBuildExistsMutex.RLock()
	defer fake.checkBuildExistsMutex.RUnlock()
	fake.configureDockerAuthMutex.RLock()
	defer fake.configureDockerAuthMutex.RUnlock()
	fake.gCSPathsExistMutex.RLock()
	defer fake.gCSPathsExistMutex.RUnlock()
	fake.getGCSBuildPathsMutex.RLock()
	defer fake.getGCSBuildPathsMutex.RUnlock()
	fake.getWorkspaceVersionMutex.RLock()
	defer fake.getWorkspaceVersionMutex.RUnlock()
	fake.imagesExistMutex.RLock()
	defer fake.imagesExistMutex.RUnlock()
	fake.isKubernetesRepoMutex.RLock()
	defer fake.isKubernetesRepoMutex.RUnlock()
	fake.makeCleanMutex.RLock()
	defer fake.makeCleanMutex.RUnlock()
	fake.makeReleaseMutex.RLock()
	defer fake.makeReleaseMutex.RUnlock()
	fake.pushMutex.RLock()
	defer fake.pushMutex.RUnlock()
	fake.setReleaseTypeMutex.RLock()
	defer fake.setReleaseTypeMutex.RUnlock()
	fake.setRunTestsEnvVarMutex.RLock()
	defer fake.setRunTestsEnvVarMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImpl) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
